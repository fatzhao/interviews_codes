1.找出数组A中存在而数组B中不存在的数字

public static void main(String[] args) {
		
		int[] a = {9,0,3,54,5,6,10};
		int[] b = {3,4,5};
		int[] c = new int[a.length];
		
		int index = 0;
		
		for(int i=0; i<a.length; i++) {
			int check = 0;
			for(int j=0; j<b.length; j++) {
				while(a[i] == b[j]) {
					check = 1;
					break;
				}
			}
			if(check!=1) {
				c[index] = a[i];
				index++;
			}
		}
		int[] result = Arrays.copyOf(c, index);
		
		System.out.println(Arrays.toString(result));
}


2.一个单向链表，翻转第m到第n部分 (leetcode 92 reversed linked list 2)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        ListNode dummy = new ListNode(-1);
        ListNode pre = dummy;
        dummy.next = head;
        for(int i=1; i<m; i++){
            pre = pre.next;
        }
        ListNode cur = pre.next;
        for(int i=m; i<n; i++){
            ListNode t = cur.next;
            cur.next = t.next;
            t.next = pre.next;
            pre.next = t;
        }
        return dummy.next;
    }
}

3.0-1背包
